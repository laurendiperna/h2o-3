In [1]: import h2o

In [2]: h2o.init()


No instance found at ip and port: localhost:54321. Trying to start local jar...


JVM stdout: /var/folders/wg/3qx1qchx1jsfjqqbmz3stj7c0000gn/T/tmpof5ZIZ/h2o_hank_started_from_python.out
JVM stderr: /var/folders/wg/3qx1qchx1jsfjqqbmz3stj7c0000gn/T/tmpk4uayp/h2o_hank_started_from_python.err
Using ice_root: /var/folders/wg/3qx1qchx1jsfjqqbmz3stj7c0000gn/T/tmpKy1Wmt


Java Version: java version "1.8.0_40"
Java(TM) SE Runtime Environment (build 1.8.0_40-b27)
Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)


Starting H2O JVM and connecting: ............... Connection sucessful!
--------------------------  --------------------------
H2O cluster uptime:         1 seconds 591 milliseconds
H2O cluster version:        3.2.0.5
H2O cluster name:           H2O_started_from_python
H2O cluster total nodes:    1
H2O cluster total memory:   3.56 GB
H2O cluster total cores:    4
H2O cluster allowed cores:  4
H2O cluster healthy:        True
H2O Connection ip:          127.0.0.1
H2O Connection port:        54321
--------------------------  --------------------------

In [3]: df = h2o.H2OFrame(((1, 2, 3),
   ...:                    ('a', 'b', 'c'),
   ...:                    (0.1, 0.2, 0.3)))

Parse Progress: [##################################################] 100%
Uploaded py9bccf8ce-c01e-40c8-bc73-b8e7e0b17c6a into cluster with 3 rows and 3 cols

In [4]: df
Out[4]: H2OFrame with 3 rows and 3 columns:
    C1   C2   C3
0  1.0  2.0  3.0
1  NaN  NaN  NaN
2  0.1  0.2  0.3

In [5]: df = h2o.H2OFrame([[1, 2, 3],
   ...:                    ['a', 'b', 'c'],
   ...:                    [0.1, 0.2, 0.3]])

Parse Progress: [##################################################] 100%
Uploaded py2c9ccb17-a86e-47d7-be1a-a7950b338870 into cluster with 3 rows and 3 cols

In [6]: df
Out[6]: H2OFrame with 3 rows and 3 columns:
    C1   C2   C3
0  1.0  2.0  3.0
1  NaN  NaN  NaN
2  0.1  0.2  0.3

In [7]: df = h2o.H2OFrame({'A': [1, 2, 3],
   ...:                    'B': ['a', 'b', 'c'],
   ...:                    'C': [0.1, 0.2, 0.3]})

Parse Progress: [##################################################] 100%
Uploaded py2714e8a2-67c7-45a3-9d47-247120c5d931 into cluster with 3 rows and 3 cols

In [8]: df
Out[8]: H2OFrame with 3 rows and 3 columns:
   A    C  B
0  1  0.1  a
1  2  0.2  b
2  3  0.3  c

In [15]: df2 = h2o.H2OFrame({'A': [1, 2, 3],
   ....:                     'B': ['a', 'a', 'b'],
   ....:                     'C': ['hello', 'all', 'world'],
   ....:                     'D': ['12/1/2015 00:21:25', '12/2/2015 01:21:25', '12/3/2015 02:21:25']},
   ....:                    column_types=['numeric', 'enum', 'string', 'time'])

Parse Progress: [##################################################] 100%
Uploaded py45ac0220-5242-4b3c-8722-312e1c369a9d into cluster with 3 rows and 4 cols

In [16]: df2
Out[16]: H2OFrame with 3 rows and 4 columns:
   A      C  B                   D
0  1  hello  a  12/1/2015 00:21:25
1  2    all  a  12/2/2015 01:21:25
2  3  world  b  12/3/2015 02:21:25

In [17]: df2.types
Out[17]: {u'A': u'Numeric', u'B': u'Enum', u'C': u'String', u'D': u'String'}

In [18]: import numpy as np

In [24]: df = h2o.H2OFrame(np.random.randn(100,4).tolist(), column_names=list('ABCD'))

Parse Progress: [##################################################] 100%
Uploaded py0de6402c-202f-4205-b5f2-9c5e7690bcae into cluster with 100 rows and 4 cols

In [25]: df.head()
H2OFrame with 100 rows and 4 columns:
       C1         C2          C3          C4
---------  ---------  ----------  ----------
 0.681416   0.153326  -1.28333     0.35092
 0.866066  -1.09751    0.364225    0.766468
 0.315925  -1.45174    0.0947229  -0.0454117
-1.48       0.304739   0.0144252   1.21446
-0.614054  -0.347474   0.646378    0.161853
 0.142967   1.09584   -0.929231    0.800363
 1.44996   -1.47437   -0.540694    0.212893
 0.233408  -0.13614    0.660612   -0.12907
-1.34704    0.150048  -0.400669    1.02357
-0.208022   1.44384   -0.79399     0.380562

In [26]: df.tail(5)
H2OFrame with 100 rows and 4 columns:
       C1         C2         C3         C4
---------  ---------  ---------  ---------
-0.820223   0.345544  -0.452483   2.43058
 1.89227    1.22725   -0.137999   0.489064
 0.81175    0.15655    0.953717   0.917571
-0.832476  -0.065247   2.04164   -0.544807
-0.29833   -0.662612   0.049375  -2.99228

In [27]: df.columns
Out[27]: [u'C1', u'C2', u'C3', u'C4']

In [28]: df.describe()
Rows: 100 Cols: 4

Chunk compression summary:
chunk_type    chunk_name    count    count_percentage    size    size_percentage
------------  ------------  -------  ------------------  ------  -----------------
C8D           64-bit Reals  4        100                 3.4 KB  100

Frame distribution summary:
                 size    number_of_rows    number_of_chunks_per_column    number_of_chunks
---------------  ------  ----------------  -----------------------------  ------------------
127.0.0.1:54321  3.4 KB  100               1                              4
mean             3.4 KB  100               1                              4
min              3.4 KB  100               1                              4
max              3.4 KB  100               1                              4
stddev           0  B    0                 0                              0
total            3.4 KB  100               1                              4

Column-by-Column Summary:

               C1               C2               C3              C4
-------------  ---------------  ---------------  --------------  ---------------
type           real             real             real            real
mins           -2.22225849398   -1.91240889911   -1.7492367219   -2.99228260278
maxs           2.83123149178    2.71573687839    2.9243640466    2.77052951598
mean           0.0497528649178  0.0875691081477  0.118992118177  0.0816658781354
sigma          1.01276062606    1.00810010354    0.858652356296  1.05595811729
zero_count     0                0                0               0
missing_count  0                0                0               0

In [29]: df['C1']
Out[29]: H2OFrame with 100 rows and 1 columns:
         C1
0  0.681416
1  0.866066
2  0.315925
3 -1.480005
4 -0.614054
5  0.142967
6  1.449963
7  0.233408
8 -1.347036
9 -0.208022

In [30]: df[1]
Out[30]: H2OFrame with 100 rows and 1 columns:
         C2
0  0.153326
1 -1.097507
2 -1.451745
3  0.304739
4 -0.347474
5  1.095839
6 -1.474375
7 -0.136140
8  0.150048
9  1.443842

In [31]: df[['C1','C2']]
Out[31]: H2OFrame with 100 rows and 2 columns:
         C1        C2
0  0.681416  0.153326
1  0.866066 -1.097507
2  0.315925 -1.451745
3 -1.480005  0.304739
4 -0.614054 -0.347474
5  0.142967  1.095839
6  1.449963 -1.474375
7  0.233408 -0.136140
8 -1.347036  0.150048
9 -0.208022  1.443842

In [32]: df[0:2]
Out[32]: H2OFrame with 100 rows and 2 columns:
         C1        C2
0  0.681416  0.153326
1  0.866066 -1.097507
2  0.315925 -1.451745
3 -1.480005  0.304739
4 -0.614054 -0.347474
5  0.142967  1.095839
6  1.449963 -1.474375
7  0.233408 -0.136140
8 -1.347036  0.150048
9 -0.208022  1.443842

In [33]: df[2:7, :]
Out[33]: H2OFrame with 5 rows and 4 columns:
         C1        C2        C3        C4
0  0.315925 -1.451745  0.094723 -0.045412
1 -1.480005  0.304739  0.014425  1.214459
2 -0.614054 -0.347474  0.646378  0.161853
3  0.142967  1.095839 -0.929231  0.800363
4  1.449963 -1.474375 -0.540694  0.212893

In [35]: df2[ df2["B"] == "a", :]
Out[35]: H2OFrame with 2 rows and 4 columns:
   A      C  B                   D
0  1  hello  a  12/1/2015 00:21:25
1  2    all  a  12/2/2015 01:21:25
